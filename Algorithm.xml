<templateSet group="Algorithm">
  <template name="OYTree" value="import java.util.*;&#10;&#10;public class Solution {&#10;    // 节点的基本构造&#10;    public static class Node {&#10;        public int value;&#10;        public Node left;&#10;        public Node right;&#10;&#10;        public Node(int data) {&#10;            this.value = data;&#10;        }&#10;    }&#10;&#10;    // 递归前序遍历&#10;    public static void preOrderRecur(Node head) {&#10;        if (head == null) {&#10;            return;&#10;        }&#10;        System.out.print(head.value + &quot; &quot;);&#10;        preOrderRecur(head.left);&#10;        preOrderRecur(head.right);&#10;    }&#10;&#10;    // 非递归前序遍历&#10;    public static void preOrderUnRecur(Node head) {&#10;        System.out.print(&quot;pre-order: &quot;);&#10;        if (head != null) {&#10;            // 采用栈结构&#10;            Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();&#10;            stack.add(head);&#10;            while (!stack.isEmpty()) {&#10;                // 这里的head是复用的，表示当前节点&#10;                head = stack.pop();&#10;                System.out.print(head.value + &quot; &quot;);&#10;                // 整体的顺序是先压右后压左&#10;                if (head.right != null) {&#10;                    stack.push(head.right);&#10;                }&#10;                if (head.left != null) {&#10;                    stack.push(head.left);&#10;                }&#10;            }&#10;        }&#10;        System.out.println();&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" description="数据结构算法 - 二叉树 - 前序遍历" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>