<templateSet group="Algorithm-Queue">
  <template name="oyqueue-implement-by-stack" value="import java.util.*;&#10;&#10;class Solution {&#10;    public static class ArrayQueue {&#10;        private Integer[] arr;&#10;        // 用 size 把 first 和 end 追的行为解耦掉&#10;        private Integer size;&#10;        // 表示如果拿出一个数应该拿哪里的数&#10;        private Integer first;&#10;        // 表示如果新加一个数应该填到哪里的数&#10;        private Integer last;&#10;&#10;        public ArrayQueue(int initSize) {&#10;            if (initSize &lt; 0) {&#10;                throw new IllegalArgumentException(&quot;The init size is less than 0&quot;);&#10;            }&#10;            arr = new Integer[initSize];&#10;            size = 0;&#10;            first = 0;&#10;            last = 0;&#10;        }&#10;&#10;        public Integer peek() {&#10;            if (size == 0) {&#10;                return null;&#10;            }&#10;            return arr[first];&#10;        }&#10;&#10;        public void push(int obj) {&#10;            if (size == arr.length) {&#10;                throw new ArrayIndexOutOfBoundsException(&quot;The queue is full&quot;);&#10;            }&#10;            size++;&#10;            arr[last] = obj;&#10;            last = last == arr.length - 1 ? 0 : last + 1;&#10;        }&#10;&#10;        public Integer poll() {&#10;            if (size == 0) {&#10;                throw new ArrayIndexOutOfBoundsException(&quot;The queue is empty&quot;);&#10;            }&#10;            size--;&#10;            int tmp = first;&#10;            first = first == arr.length - 1 ? 0 : first + 1;&#10;            return arr[tmp];&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" description="队列 - 用数组结构实现固定的队列 - OYQueueImplementByStack" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>